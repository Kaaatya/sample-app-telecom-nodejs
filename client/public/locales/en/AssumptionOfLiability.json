{
  "Title": "Assumption of Liability",
  "CurrentAccountOwner": "Current account owner",
  "NewAccountOwner": "New account owner",
  "Name": "Name:",
  "Email": "Email:",
  "CountryCode": "Country code:",
  "PhoneNumber": "Phone number:",
  "ButtonName": "Submit",
  "PhonePlaceholder": "555-555-5555",
  "InvalidEmailFormatError": "Invalid email format.",
  "InvalidCountryCodeError": "Invalid country code.",
  "InvalidPhoneNumberError": "Invalid phone number.",

  "SeeMore": {
    "Title": "See behind the scenes",
    "Text": "View the <a target='_blank' rel='noopener noreferrer' href='https://github.com/docusign/sample-app-mytelecom-nodejs/blob/main/server/controllers/assumptionLiabilityController.js'>controller</a> on and <a target='_blank' rel='noopener noreferrer' href='https://github.com/docusign/sample-app-mytelecom-nodejs/blob/main/server/envelopes/assumptionLiabilityEnvelope.js'>envelope</a> code on GitHub.<br><br><h3>This sample features:</h3><ul><li>SMS delivery</li><li>Data entry tabs</li><li>Anchor positioning</li><li>Embedded signing</li></ul><h3>Code flow:</h3><h5>Step 1</h5>When the button is selected, we ask the user to provide a name and email address for the current account owner and a name and phone number for the new account owner. The information will be used to create two Signers for the envelope. We add a PDF document to the envelope and create SignHere tabs and Text tabs for each recipient.</p><h5>Step 2</h5>Using the <a href=\"https://developers.docusign.com/docs/esign-rest-api/reference/envelopes/envelopes/create/\" target=\"_blank\" rel=\"noopener noreferrer\">Envelopes:create</a> API method, create and immediately send the envelope with the envelope definition made from the previous step. The returned <i>\"envelopeId\"</i> is then stored for use in the next step.<h3>Step 3</h3>To enable embedded signing within the app, call the <a href=\"https://developers.docusign.com/docs/esign-rest-api/reference/envelopes/envelopeviews/createrecipient/\" target=\"_blank\" rel=\"noopener noreferrer\">EnvelopeViews:createRecipient</a> API method with the <i>envelopeId</i> from the previous step and a return URL to this application. This method then generates a signing URL for the signer, to which the user is redirected. <h3>Step 4</h3>After the user completes signing the envelope in the embedded signing session, the envelope is redirected to the second signer by SMS delivery."
  }
}
